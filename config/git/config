[user]
    email = alonso.herreros.c@gmail.com
    name = Alonso Herreros

[core]
    editor = vim
    pager = less -FRXx5,9

[alias]
    # ---- Init and management ----
    i    = init

    su   = submodule
    suu  = submodule update --init
    suur = submodule update --init --recursive
    suuu = submodule update --init --recursive
    sum  = submodule foreach "git checkout $(git_main_branch); git reset --hard"

    # ---- Informational: status, log, diff, show ----

    # Taken: `st` for `stash`, `su` for `submodule`, `sh` for `show`
    s    = status -sb
    ss   = status --short
    sl   = status

    l    = log --oneline               # Log (oneline by default)
    ls   = log --oneline -n 10         # Log short
    la   = log --oneline --all --graph # Log all (in graph)
    las  = log --oneline --all --graph -n 10 # Log all short (in graph)
    ll   = log                         # Log long (with details)
    lla  = log --all --graph           # Log long all (graph, with details)

    d    = diff
    ds   = diff --cached

    sh   = show

    # ---- Index operations: add, restore ----

    a    = add
    aa   = add -A
    ap   = add --patch

    # Taken: `rb` for `rebase`, `rv` and `ra` for `remote`
    r    = restore
    rr   = restore .
    rs   = restore --staged
    rrs  = restore . --staged

    # ---- Commits and stashes ----

    # Taken: `co` and `c-` for `checkout`, `cp` for `cherry-pick`
    c    = commit
    cm   = commit -m
    cmp  = "!cmp()  { git commit -m \"$@\"; git push; }; cmp"
    cc   = "!cc()   { git add -A; git commit; }; cc"
    ccm  = "!ccm()  { git add -A; git commit -m \"$@\"; }; ccm"
    ccmp = "!ccmp() { git add -A; git commit -m \"$@\"; git push; }; ccmp"
    ca   = commit --amend
    cane = commit --amend --no-edit
    # Fixup
    cf   = "!git commit --fixup $(git log -n 50 --pretty=''%C(auto)%h %s' | fzf | cut -c -7)"
    cfm  = "!git commit --fixup $(git log -n 50 --pretty=''%C(auto)%h %s' | fzf | cut -c -7) -m \"$@\""
    ccf  = "!ccf() { git add -A; git commit --fixup $(git log -n 50 --pretty=''%C(auto)%h %s' | fzf | cut -c -7); }; ccf"
    ccfm = "!ccf() { git add -A; git commit --fixup $(git log -n 50 --pretty=''%C(auto)%h %s' | fzf | cut -c -7) -m \"$@\"; }; ccfm"

    st   = stash
    stm  = stash -m
    stt  = stash --all
    sttm = stash --all -m
    stk  = stash --keep-index
    stkm = stash --keep-index -m
    sts  = stash save
    sta  = stash apply
    stl  = stash list
    stp  = stash pop
    std  = stash drop
    stsh = stash show

    # ---- Branch operations: checkout, branch, merge, rebase, tag ----

    co   = checkout
    cob  = checkout -b
    c-   = checkout -

    b    = branch
    ba   = branch -a
    bd   = branch -d
    br   = branch -r
    bl   = branch -l
    bla  = branch -la

    m    = merge
    mt   = mergetool

    cp   = cherry-pick
    cpa  = cherry-pick --abort
    cpc  = cherry-pick --continue

    rb   = rebase
    rba  = rebase --abort
    rbc  = rebase --continue
    rbi  = rebase --interactive
    rbs  = rebase --skip

    t    = tag

    # ---- Remote operations: fetch, push, pull, remote ----

    f    = fetch
    fa   = fetch --all
    fp   = fetch --prune
    fap  = fetch --all --prune

    # Taken `pl` for `pull`
    p    = push
    pt   = push --tags
    pd   = push --dry-run
    pf   = push --force-with-lease
    pff  = push --force
    po   = push origin
    pu   = push upstream

    pl   = pull
    plr  = pull --rebase
    pla  = pull --autostash
    plar = pull --autostash --rebase
    plom = pull origin $(git_main_branch)
    plu  = pull upstream
    plur = pull upstream --rebase

    # Not to be confused with `reset` aliases, which also start with `r`
    rv   = remote --verbose
    ra   = remote add
    rao  = remote add origin


    # ---- Others ----

    uncommit = reset --soft HEAD^
    shit = uncommit
    unstage = resetÂ HEAD --
    ignore = update-index --asume-unchanged

[init]
    defaultBranch = main

[status]
    submoduleSummary = true

[log]
    date = human
    decorate = short
    abbrevCommit = true
    follow = true

[blame]
    blankBoundary = true
    coloring = repeatedLines
    date = human

[commit]
    verbose = true

[push]
    autoSetupRemote = true

[pull]
    ff = only

[rebase]
    autosquash = true

[merge]
    conflictstyle = zdiff3
    tool = fugitive

[mergetool]
    tool = vimdiff
    hideResolve=true
    writeToTemp=true
    # prompt = false

[mergetool.vimdiff]
    layout = "LOCAL,REMOTE / MERGED + MERGED,REMOTE"

[mergetool.fugitive]
    cmd = vim -f -c "Gvdiffsplit!" "$MERGED"

[diff]
    algorithm = histogram
    colorMoved = default
    submodule = log

[submodule]
    recurse = true

[help]
    autocorrect = prompt

[advice]
    addIgnoredFile = false

[url "git@github.com:"]
    pushInsteadOf = "https://github.com/"
    insteadOf = "gh:"

[url "git@gitlab.com:"]
    pushInsteadOf = "https://gitlab.com/"
    insteadOf = "gl:"

# [diff "jupyternotebook"]
#     command = git-nbdiffdriver diff
# [merge "jupyternotebook"]
#     driver = git-nbmergedriver merge %O %A %B %L %P
#     name = jupyter notebook merge driver
# [difftool "nbdime"]
#     cmd = git-nbdifftool diff \"$LOCAL\" \"$REMOTE\" \"$BASE\"
# [difftool]
#     prompt = false
# [mergetool "nbdime"]
#     cmd = git-nbmergetool merge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"
