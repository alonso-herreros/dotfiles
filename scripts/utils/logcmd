#!/usr/bin/env bash

# =========================================================
#
# @filename: logcmd
#
# @author: Alonso Herreros
#
# @description:
# log a command name and output to a file
#
# @dependencies:
# - tee
#
# @optional:
# - stdbuf
#
# =========================================================

function echo_help() {
    echo "Usage: logcmd [flags] <filename> <command>"
    echo "  Flags:"
    echo "   -c  --clear   Clear file before writing"
    echo "   -h  --help    Show this message"
}

function args() {
    case "$1" in
        -c | --clear)
            CLEAR=1
            shift;;
        -h | --help)
            echo_help
            exit 0;;
    esac

    if [[ -n "$1" && "$1" != -* ]]; then
        FILE="$1"
        shift
    else
        echo_help
        exit 1
    fi

    COMMAND=${@:1}
}

CLEAR=0
args $@

# Well, empty the file, duh
if [ $CLEAR -eq 1 ]; then
    > $FILE
fi

# Log date and command running
echo "[$(date '+%Y-%m-%d, %T')] $COMMAND" >> $FILE

trap 'kill -INT $cmd_pid' SIGINT

# If the program doesn't flush, not using stdbuf means we won't see anything
if command -v stdbuf &> /dev/null; then
    stdbuf -oL $COMMAND 2>&1 | tee -a $FILE &
    cmd_pid=$!
else
    # If stdbuf is not installed, can't use it
    $COMMAND 2>&1 | tee -a $FILE &
    cmd_pid=$!
fi

wait $cmd_pid

